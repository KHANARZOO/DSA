class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int n = inorder.length;
        if(n==0) return null;
        if(n==1) return new TreeNode(inorder[0]);

        int node = preorder[0];
        TreeNode root = new TreeNode(node); 

        int rootIndex = 0;
        for(int i=0;i<n;i++){
            if(inorder[i]==node){
                rootIndex = i;
                break;
            }
        }
        int[] inLeftSubtree = new int[rootIndex];
        int[] inRightSubtree = new int[n-rootIndex-1];

        for(int i=0;i<rootIndex;i++){
            inLeftSubtree[i] = inorder[i];
        }
        for(int i=rootIndex+1;i<n;i++) {
            inRightSubtree[i-rootIndex-1] = inorder[i];
        }

        int[] preLeftSubtree = new int[rootIndex];
        int[] preRightSubtree = new int[n-rootIndex-1];

        for(int i=0;i<rootIndex;i++){
            preLeftSubtree[i] = preorder[i+1];
        }

        for(int i=rootIndex+1;i<n;i++){
            preRightSubtree[i-rootIndex-1] = preorder[i];
        }

        root.left = buildTree(preLeftSubtree, inLeftSubtree);
        root.right = buildTree(preRightSubtree, inRightSubtree);

        return root;
    }
}
/*
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
root -> 3 
rootIndex -> 1
inLeftSubtree -> [9]
inRightSubtree -> [15 20 7]

preLeftSubtree -> [9]
preRightSubtree -> [20,15,7]

Recurrsion -> inLeftSubtree -> [9], preLeftSubtree -> [9]
n==1 -> newNode[9] return

Recurrsion -> inRightSubtree -> [15 20 7], preRightSubtree -> [20,15,7]
root -> 20
rootIndex -> 1
inLeftSubtree -> [15]
inRightSubtree -> [7]

preLeftSubtree -> [15]
preRightSubtree -> [7]


Recurrsion -> inLeftSubtree -> [15], preLeftSubtree -> [15]
n==1 -> newNode[15] return


Recurrsion -> inRightSubtree -> [7], preRightSubtree -> [7]
n==1 -> newNode[7] return
*/
