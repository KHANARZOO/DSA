class Solution {
    // Function to return a list of nodes visible from the top view
    // from left to right in Binary Tree.
    static class Pair{
        Node node;
        int level;
        
        Pair(Node node, int level){
            this.node = node;
            this.level = level;
        }
    }
    static ArrayList<Integer> topView(Node root) {
        if(root==null) return new ArrayList<>();
        ArrayList<Integer> li = new ArrayList<>();
        HashMap<Integer, Integer> map = new HashMap<>();
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(root, 0));
        int minLevel = Integer.MAX_VALUE;
        int maxLevel = Integer.MIN_VALUE;
        while(!queue.isEmpty()){
            Pair remove = queue.remove();
            Node nn = remove.node;
            int lev = remove.level;
            minLevel = Math.min(minLevel, lev);
            maxLevel = Math.max(maxLevel, lev);
           
            if (!map.containsKey(lev)) { // FIX: Only store the first node at each level
                map.put(lev, nn.data);
            }
            if(remove.node.left!=null) queue.add(new Pair(remove.node.left, lev-1));
            if(remove.node.right!=null) queue.add(new Pair(remove.node.right, lev+1));
        }
        for(int i=minLevel;i<=maxLevel;i++){
            li.add(map.get(i));
        }
        return li;
    }
}
