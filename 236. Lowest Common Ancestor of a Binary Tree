class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // Base case: if the root is null, return null (no ancestor found)
        if (root == null) return null;
        
        // If root matches either p or q, return root (potential ancestor found)
        if (root == p || root == q) return root;

        // Search in the left subtree
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        // Search in the right subtree
        TreeNode right = lowestCommonAncestor(root.right, p, q);

        // If both left and right are not null, it means p and q are found in different subtrees
        // So, this root is their lowest common ancestor
        if (left != null && right != null) return root;

        // If both sides return null, no ancestor found in this path
        if (left == null && right == null) return null;

        // If one side is not null, return that (meaning p and q found on one side)
        if (left != null) return left;
        if (right != null) return right;

        // Fallback return (won't actually reach here because all cases are handled above)
        return null;
    }
}
