Problem Description

Imagine you're a teacher. You ask students to call out a letter one by one. After each letter, you jot down the very first letter that's only been called out once. If all letters have been repeated, you write "#".

Here's a scenario:

A student says "a". It's the first letter. You write "a".
Next, a student says "b", "a" is still unique, so you add "a". Now it's "aa".
A student says "a" again. Now, "b" is the unique one. You add "b", making it "aab".
A student says "b". All letters so far are repeated. You add "#". It becomes "aab#".
A student says "c". "c" is unique. You add "c". The final is "aab#c".
Your task? Given the sequence the students call out A, determine the string on the board.





Problem Constraints

1 <= |A| <= 100000



Input Format

The only argument given is string A.



Output Format

Return a string after processing the stream of lowercase alphabets A.



Example Input

Input 1:

 A = "abadbc"
Input 2:

 A = "abcabc"


Example Output

Output 1:

"aabbdd"
Output 2:

"aaabc#"


Example Explanation

Explanation 1:

"a"      -   first non repeating character 'a'
"ab"     -   first non repeating character 'a'
"aba"    -   first non repeating character 'b'
"abad"   -   first non repeating character 'b'
"abadb"  -   first non repeating character 'd'
"abadbc" -   first non repeating character 'd'
Explanation 2:

"a"      -   first non repeating character 'a'
"ab"     -   first non repeating character 'a'
"abc"    -   first non repeating character 'a'
"abca"   -   first non repeating character 'b'
"abcab"  -   first non repeating character 'c'
"abcabc" -   no non repeating character so '#'



public class Solution {
    public String solve(String A) {
        //HashMap+Queue
        HashMap<Character, Integer> map = new HashMap<>();
        Queue<Character> queue = new LinkedList<>();
        StringBuilder sb = new StringBuilder();
        for(int i=0;i<A.length();i++){
            if(map.containsKey(A.charAt(i))) map.put(A.charAt(i), map.get(A.charAt(i))+1);
            else map.put(A.charAt(i), 1);

            queue.add(A.charAt(i));
            while(!queue.isEmpty() && map.get(queue.peek())>1){
                queue.remove();
            }
            if(!queue.isEmpty()) sb.append(queue.peek());
            else sb.append("#");
        }
        return sb.toString();
    }
}
/*
 "abadbc" map -> a->1 queue -> a ans = "a" 
          map -> a->1 b->1 queue -> a and b -> ans = "aa"
          map -> a->2 b->1 queue -> a and b and a -> will have a while loop to pop() the front element if it has freq>1 
                NOW   map -> a->2 b->1 queue -> b and a  and will check if mine queue is not empty will insert the front ele of queue into our ans -> "aab"
          map -> b->1 and a->2 and d->1 queue ->b and a and d -> ans = "aabb"
          map -> a->2 and d->1 b->2 queue -> b and a and d after removal from queue -> a and d but freq of a is also>1 so a will also get removed from Queue
                NOW queue -> d ans-> "aabbd"
         map -> a->2 and d->1 b->2 c->1queue -> d since freq of fro is still one willl insert d ans -> "aabbdd"
*/
