class Solution {
    public static int precedence(char ch){
        if(ch=='^') return 3;
        else if(ch=='/' || ch=='*') return 2;
        else if(ch=='+' || ch=='-') return 1;
        else return -1;
    }
    static boolean isChar(char c){
        if(c>='a' && c<='z' || c>='A' && c<='Z' || c>='1' && c<='9' ) return true;
        else return false;
    }
    public static String infixToPostfix(String s) {
        //Using stack
        Stack<Character> st = new Stack<>();
        StringBuilder sb = new StringBuilder();
        
        
         for(int i=0;i<s.length();i++){
            if(isChar(s.charAt(i))) sb.append(s.charAt(i));
            else if(s.charAt(i)=='(') st.push(s.charAt(i));
            else if(s.charAt(i)==')'){
                while(!st.isEmpty() && st.peek()!='('){
                    sb.append(st.pop());
                } 
                //This pop() is for opening bracket
                st.pop();
            }
            else{
                //If lower precedence is at peek just push the current char and move but if higher precedence is at peek then pop and add to ans and hen push the current char
                while(!st.isEmpty() && precedence(s.charAt(i)) <= precedence(st.peek())){
                    sb.append(st.pop());
                }
                st.push(s.charAt(i));
            }
        }
        while(!st.isEmpty()) sb.append(st.pop());
        
        return sb.toString();
    }
}
