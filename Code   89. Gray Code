class Solution {
    public List<Integer> grayCode(int n) {
        List<Integer> result  = new ArrayList<>();

        //sanity check
        if(n<=0) return new ArrayList<>();

        //base condition
        if(n==1){
            result .add(0);
            result .add(1);
            return result ;
        }
       // Recursive call to get (n - 1)-bit Gray Code
        List<Integer> prev = grayCode(n - 1);

        // First half: add 0 as MSB (same as previous list)
        for (int code : prev) {
            result.add(code); // Adding 0 at MSB does not change the number
        }

        // Second half: add 1 as MSB by reversing and adding 2^(n-1)
        int prefix = (int) Math.pow(2, n - 1);
        for (int i = prev.size() - 1; i >= 0; i--) {
            result.add(prefix + prev.get(i));
        }

        return result ;
    }
}
=========================================================================================================================================================
// User function Template for Java

class Solution {
    public ArrayList<String> graycode(int n) {
        ArrayList<String> res = new ArrayList<>();
        
        //sanity
        if(n<=0){
            return new ArrayList<>();
        }
        
        //base case
        if(n==1){
            res.add("0");
            res.add("1");
            return res;
        }
        
        //first half -> add 0 at prefix
        ArrayList<String> temp = graycode(n-1);
        
        for(int i=0;i<temp.size();i++){
            res.add("0"+temp.get(i));
        }
        
        //second half -> add 1 at prefix
        
        for(int i=temp.size()-1; i>=0 ;i--){
            res.add("1"+temp.get(i));
        }
        return res;
    }
}
