class Solution {
    public boolean search(int[] nums, int target) {
        int n=nums.length;
        int i=0;
        int j=n-1;
        int mid=0;

        while(i<=j){
            mid= i+(j-i)/2;

            if(nums[mid]==target) return true;
            //To handle duplicates -> as it creates ambiguity to know our mid is in which part of the array wheather rotated or unrotated
            if(nums[i]==nums[mid] && nums[mid]==nums[j]){
                i+=1;
                j-=1;
            }
            else if(nums[mid]<nums[i]){
                //we are in unrotated part
                if(target>nums[mid] && target<=nums[j]){
                    //target is in unrotated part
                    i=mid+1;
                }else j=mid-1; //target is in rotated part
            }else {//nums[mid]>nums[i]
                if(target>=nums[i] && target<nums[mid]){
                    //target is in rotated part
                    j=mid-1;
                }else i=mid+1; //target is not in rotated part
            }
        }
        return false;
    }
}
/*
[2,5,6,0,0,1,2], target = 3
i=0 j=6 mid->3 -> nums[mid] = 0 -> nums[mid]<nums[i] -> mid is in unrotated part
                                -> now check target>nums[mid] && target<=nums[j] ->i=mid+1
                                    else j=mid-1; //go to rotated part

[1,0,1,1,1] -> i=0 j=4-> mid=2-> nums[mid]<nums[i]
*/
