class Solution {
    public int singleNonDuplicate(int[] nums) {
        //Binary search -> o(logn) & o(1)
        int n= nums.length;
        if(n==1) return nums[0];
        int i=0;
        int j=n-1;
        int mid=0;
        int first =0;
        int second =0;
        if(nums[0]!=nums[1]) return nums[0];
        if(nums[n-1]!=nums[n-2]) return nums[n-1];
        while(i<=j){
            mid = i+(j-i)/2;
            if(mid>0 && mid<n-1 && nums[mid]!=nums[mid-1] && nums[mid]!=nums[mid+1]){
                return nums[mid];
            }
            if(mid<n-1 && nums[mid]==nums[mid+1]){
                first = mid;
                second=mid+1;
            }else if(mid>0 && nums[mid]==nums[mid-1]){
                second=mid;
                first=mid-1;
            }
            if(first%2==0){
                //pairs before impurity -> even odd
                //To search for impurity -> go to right
                i=mid+1;
            }else{
                //pairs after impurity -> odd even
                j=mid-1;
            }
        }
        return -1;
    }
}
