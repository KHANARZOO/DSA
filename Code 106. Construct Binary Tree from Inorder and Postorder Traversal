class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        int n = inorder.length;
        if(n==0) return null;
        if(n==1) return new TreeNode(inorder[0]);

        int node = postorder[n-1];
        TreeNode root = new TreeNode(node); 

        int rootIndex = 0;
        for(int i=0;i<n;i++){
            if(inorder[i]==node){
                rootIndex = i;
                break;
            }
        }
        int[] inLeftSubtree = new int[rootIndex];
        int[] inRightSubtree = new int[n-rootIndex-1];

        for(int i=0;i<rootIndex;i++){
            inLeftSubtree[i] = inorder[i];
        }
        for(int i=rootIndex+1;i<n;i++) {
            inRightSubtree[i-rootIndex-1] = inorder[i];
        }

        int[] postLeftSubtree = new int[rootIndex];
        int[] postRightSubtree = new int[n-rootIndex-1];

        for(int i=0;i<rootIndex;i++){
            postLeftSubtree[i] = postorder[i];
        }

        for(int i=rootIndex;i<n-1;i++){
            postRightSubtree[i-rootIndex] = postorder[i];
        }

        root.left = buildTree(inLeftSubtree, postLeftSubtree);
        root.right = buildTree(inRightSubtree, postRightSubtree);

        return root;
    }
}
