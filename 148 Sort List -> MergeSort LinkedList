/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode findMid(ListNode node) {
        if (node == null || node.next == null)
            return node;
        ListNode slow = node;
        ListNode fast = node;
        // The fast pointer moves twice as fast as the slow pointer
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        // When the fast pointer reaches the end, the slow pointer is at the middle.
        return slow;
    }

    public ListNode merge(ListNode head1, ListNode head2) {
        ListNode newHead = new ListNode();
        ListNode temp = new ListNode();

        if (head1 == null && head2 == null)
            return head1;

        if (head1 == null)
            return head2;
        if (head2 == null)
            return head1;

        if (head1.val <= head2.val) {
            //newHead will be head1
            newHead = head1;
            head1 = head1.next;
        } else {
            newHead = head2;
            head2 = head2.next;
        }
        temp = newHead;
        while (head1 != null && head2 != null) {
            if (head1.val <= head2.val) {
                temp.next = head1;
                head1 = head1.next;
                temp = temp.next;
            } else {
                temp.next = head2;
                head2 = head2.next;
                temp = temp.next;
            }
        }
        if(head1 != null) {
            temp.next = head1;
        }
        if(head2 != null) {
            temp.next = head2;
        }
        return newHead;
    }

    public ListNode sortList(ListNode head) {
        //Merge Sort
        if (head == null)
            return head;
        if (head.next == null)
            return head;

        ListNode mid = findMid(head);
        ListNode head2 = mid.next;
        //disconnect
        mid.next = null;
        ListNode head1 = head;

        head1 = sortList(head1);
        head2 = sortList(head2);
        ListNode finalHead = merge(head1, head2);
        return finalHead;
    }
}
