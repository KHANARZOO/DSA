class Solution {
    public long subArrayRanges(int[] nums) {
        int n = nums.length;
        int[] nsLeft = new int[n];
        int[] nsRight = new int[n];
        int[] ngleft = new int[n];
        int[] ngRight = new int[n];
        Stack<Integer> st = new Stack<>();

        // Calculate next smaller element indices (Left)
        nsLeft[0] = -1;
        st.push(0);

        for (int i = 1; i < n; i++) {
            while (!st.isEmpty() && nums[st.peek()] >= nums[i]) {
                st.pop();
                if (st.isEmpty()) {
                    nsLeft[i] = -1;
                    break;
                }
            }
            if (!st.isEmpty())
                nsLeft[i] = st.peek();
            st.push(i);
        }
        //  for(int i=0;i<n;i++){
        //     System.out.print(nsLeft[i]+" ");
        // }
        st.clear();
        nsRight[n - 1] = n;
        st.push(n - 1);
        // Calculate next smaller element indices (Right)
        for (int i = n - 2; i >= 0; i--) {
            while (!st.isEmpty() && nums[st.peek()] > nums[i]) {
                st.pop();
                if (st.isEmpty()) {
                    nsRight[i] = n;
                    break;
                }
            }
            if (!st.isEmpty())
                nsRight[i] = st.peek();
            st.push(i);
        }

        // for (int i = 0; i < n; i++) {
        //     System.out.print(nsRight[i] + " ");
        // }

        st.clear();
        ngleft[0] = -1;
        st.push(0);

        for (int i = 1; i < n; i++) {
            while (!st.isEmpty() && nums[st.peek()] <= nums[i]) {
                st.pop();
                if (st.isEmpty()) {
                    ngleft[i] = -1;
                    break;
                }
            }
            if (!st.isEmpty())
                ngleft[i] = st.peek();
            st.push(i);
        }
        // for (int i = 0; i < n; i++) {
        //     System.out.print(ngleft[i] + " ");
        // }
        st.clear();
        ngRight[n - 1] = n;
        st.push(n - 1);
        // Calculate next smaller element indices (Right)
        for (int i = n - 2; i >= 0; i--) {
            while (!st.isEmpty() && nums[st.peek()] < nums[i]) {
                st.pop();
                if (st.isEmpty()) {
                    ngRight[i] = n;
                    break;
                }
            }
            if (!st.isEmpty())
                ngRight[i] = st.peek();
            st.push(i);
        }
        // for (int i = 0; i < n; i++) {
        //     System.out.print(ngRight[i] + " ");
        // }
        long maxSum = 0;
        long minSum = 0;
        for (int i = 0; i < n; i++) {
            long startSmall = i - nsLeft[i];
            long endSmall = nsRight[i] - i;
            minSum = minSum + startSmall * endSmall * nums[i];
            long startLarge = i - ngleft[i];
            long endLarge = ngRight[i] - i;
            maxSum = maxSum + startLarge * endLarge * nums[i];
        }
        return maxSum - minSum;
    }
}
