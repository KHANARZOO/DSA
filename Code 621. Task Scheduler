class Solution {
    public int leastInterval(char[] tasks, int n) {
        //Max-heap+hashmap/hasharray
        int m = tasks.length;
        int[] arr = new int[26];
        Arrays.fill(arr, 0);
        //max-heap to store the frequency in decreasing order 
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for (int i = 0; i < m; i++) {
            arr[tasks[i] - 'A'] += 1;
        }
        //iterate over arr and store frequency in priorityQueue
        for (int i = 0; i < 26; i++) {
            if (arr[i] > 0) {
                pq.add(arr[i]);
            }
        }
        int time=0;
        while (!pq.isEmpty()) {
            //removed the element with highest fequency
            ArrayList<Integer> temp = new ArrayList<>();
            for (int i = 1; i <= n + 1; i++) {
                if (!pq.isEmpty()) {
                    int freq = pq.remove();
                    freq -= 1;
                    temp.add(freq);
                }
            }
            for (int i = 0; i < temp.size(); i++) {
                if (temp.get(i) > 0) {
                    pq.add(temp.get(i));
                }
            }
            if(pq.isEmpty()){
                time+=temp.size();
            }else{
                time+=n+1;
            }
        }
        return time;
    }
}
