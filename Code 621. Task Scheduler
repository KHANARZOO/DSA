class Solution {
    public int leastInterval(char[] tasks, int n) {
        //Max-heap+hashmap/hasharray
        int m = tasks.length;
        int[] arr = new int[26];
        Arrays.fill(arr, 0);
        //max-heap to store the frequency in decreasing order 
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for (int i = 0; i < m; i++) {
            arr[tasks[i] - 'A'] += 1;
        }
        //iterate over arr and store frequency in priorityQueue
        for (int i = 0; i < 26; i++) {
            if (arr[i] > 0) {
                pq.add(arr[i]);
            }
        }
        int time=0;
        while (!pq.isEmpty()) {
            //removed the element with highest fequency and lower it's freq and store it in temp list
            ArrayList<Integer> temp = new ArrayList<>();
            for (int i = 1; i <= n + 1; i++) {
                if (!pq.isEmpty()) {
                    int freq = pq.remove();
                    freq -= 1;
                    temp.add(freq);
                }
            }
            for (int i = 0; i < temp.size(); i++) {
                //check if temp doesn't contain 0 if contains -> don't add to pq 
                if (temp.get(i) > 0) {
                    pq.add(temp.get(i));
                }
            }
            if(pq.isEmpty()){
                System.out.println(temp.size());
                time+=temp.size();
            }else{
                time+=n+1;
            }
        }
        return time;
    }
}
/*
//Steps:-
    -> create hasharray to store the freq of characters
    -> create maxHeap to store the freq of each charcater im decreasing order
    -> Run a loop till pq is not empty
    -> and a for loop from i=1 to i<=n+1
    -> and a temp to store the current freq after decreamented
    -> since for eg we have A A B A n=2
    -> means to do A->B->_;means only after n+1 I can do A again
    -> temp-> A->2 and B->0
    -> anyhow I need to wait till n+1 time to pass to again continue with A
    -> A->B->_->A means after B->_ I was able to do A again
    -> temp-> A->1 and B->0
    -> A->B->_->A->_->_->A 
    -> temp-> A->0 and B->0 
*/
/*
ðŸ”¹ Code Overview:
The logic is:

Count frequencies of each task.

Use a Max Heap (PriorityQueue) to always schedule the most frequent task.

At every round, try to schedule up to n+1 tasks (to respect the cooldown), reduce their frequency, and re-insert them if not yet finished.

If fewer than n+1 tasks are available, idle slots are added.

ðŸ”¹ Test Case:
Letâ€™s use:

java
Copy
Edit
tasks = {'A', 'A', 'A', 'B', 'B', 'B'}
n = 2
Step 1: Count Frequency
We get frequency array:

rust
Copy
Edit
A -> 3
B -> 3
Other letters -> 0
So arr = [3, 3, 0, ..., 0]

Step 2: Fill Max Heap
pq = [3, 3] (max heap with two elements)

Step 3: Start scheduling
We'll track time = 0 initially.

ðŸ“¦ First Iteration of Outer While Loop:
pq = [3, 3]

We try to execute n+1 = 3 tasks in this round.

temp = []

i = 1: remove 3 â†’ freq becomes 2 â†’ add to temp â†’ temp = [2]

i = 2: remove 3 â†’ freq becomes 2 â†’ add to temp â†’ temp = [2, 2]

i = 3: pq is empty â†’ skip

Now add non-zero elements in temp back to pq:

pq becomes: [2, 2]

pq is not empty â†’ add full n+1 = 3 to time â†’ time = 3

ðŸ“¦ Second Iteration:
pq = [2, 2]

Try to schedule 3 tasks.

temp = []

i = 1: remove 2 â†’ freq becomes 1 â†’ temp = [1]

i = 2: remove 2 â†’ freq becomes 1 â†’ temp = [1, 1]

i = 3: pq empty â†’ skip

Reinsert non-zero â†’ pq = [1, 1]

pq not empty â†’ time += 3 â†’ time = 6

ðŸ“¦ Third Iteration:
pq = [1, 1]

temp = []

i = 1: remove 1 â†’ freq becomes 0 â†’ temp = [0]

i = 2: remove 1 â†’ freq becomes 0 â†’ temp = [0, 0]

i = 3: pq empty â†’ skip

Reinsert non-zero â†’ none added

pq is empty now, so instead of n+1, we add only temp.size() = 2 to time â†’ time = 6 + 2 = 8

âœ… Final Output: 8
ðŸ”¹ Final Dry Run Table:
Round	Max Heap (start)	Tasks Executed (freq left)	Temp List	Time Added	Total Time
1	[3, 3]	A(2), B(2)	[2, 2]	3	3
2	[2, 2]	A(1), B(1)	[1, 1]	3	6
3	[1, 1]	A(0), B(0)	[0, 0]	2	8

ðŸ”¹ Summary:
The algorithm works round by round.

In each round, it picks up to n+1 most frequent tasks.

If there are fewer than n+1 tasks and pq is empty, we add only the size of temp list (since we donâ€™t need idle time).

Time = 8 is the minimum interval needed to schedule ['A','A','A','B','B','B'] with cooldown n=2.
*/
