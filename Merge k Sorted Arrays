class Solution {
       class Tuple{
        int index;
        int val;
        int list;

        Tuple(int index, int val, int list){
            this.index = index;
            this.val = val;
            this.list = list;
        }
    }
    class SortByVal implements Comparator<Tuple>{

        public int compare(Tuple a, Tuple b){
            return a.val - b.val;
        }
    }
    public  ArrayList<Integer> mergeKArrays(int[][] arr, int K) {
        PriorityQueue<Tuple> pq = new PriorityQueue<>(new SortByVal());
        ArrayList<Integer> li = new ArrayList<>();
        for(int i=0;i<K;i++){
            pq.add(new Tuple(0,arr[i][0],i));
        }
        while(!pq.isEmpty()){
            Tuple remove = pq.remove();
            li.add(remove.val);
            //Always check this condition before adding to priorityQueue
            if(remove.index+1<K){
                int newIndex = remove.index+1;
                int newEle = arr[remove.list][remove.index+1];
                pq.add(new Tuple(newIndex,newEle, remove.list));
            }
        }
        return li;
    }
}
