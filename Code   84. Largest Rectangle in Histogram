class Solution {
    public int largestRectangleArea(int[] heights) {
        //Using Stack -> findNextSmaller on left and right -> store index not value
        Stack<Integer> st = new Stack<>();
        int n = heights.length;
        if(n==1) return heights[0];
        int[] NSLeft = new int[n];
        int[] NSRight = new int[n];
        NSLeft[0] = -1;
        st.push(0);

        for(int i=1;i<n;i++){
            if(heights[st.peek()]<heights[i]) NSLeft[i] = st.peek();
            else{
                while(!st.isEmpty() && heights[st.peek()]>=heights[i]){
                    st.pop();
                    if(st.isEmpty()){
                        NSLeft[i] = -1;
                        break;
                    }
                }
                if(!st.isEmpty() && heights[st.peek()]<heights[i]) NSLeft[i] = st.peek();
            }
            st.push(i);
        }
        st.clear();
        st.push(n-1);
        
        for(int i=n-1;i>=0;i--){
            if(heights[st.peek()]<heights[i]) NSRight[i] = st.peek();
            else{
                while(!st.isEmpty() && heights[st.peek()]>=heights[i]){
                    st.pop();
                    if(st.isEmpty()){
                        NSRight[i] = n;
                        break;
                    }
                }
                if(!st.isEmpty() && heights[st.peek()]<heights[i]) NSRight[i] = st.peek();
            }
            st.push(i);
        }
        int max = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            int height = heights[i];
            int width = (NSRight[i] - NSLeft[i]) -1;
            max = Math.max(max, height * width);
        }
        return max;
    }
}
