class Solution {
    public int search(int[] nums, int target) {
        //Binary search
        int n = nums.length;
        int i = 0;
        int j = n - 1;
        int mid = 0;
        while (i <= j) {
            mid = i+(j-i)/2;
            if (nums[mid] == target)
                return mid;
            else if (nums[i] <= nums[mid] ) {
                //you are already in rotated part
                if (target>=nums[i] && target<nums[mid]) {
                    //search in rotated part only
                    j=mid-1;
                } else {
                    //search in un rotated part 
                    i=mid+1;
                }
            } else {
                //you are already in unrotated part
                if (target>nums[mid] && target<=nums[j]) {
                    //search in unrotated part only
                    i = mid + 1;
                } else {
                    //go to rotated part
                    j = mid - 1;
                }
            }
        }
        return -1;
    }
}
/*[4,5,6,7,0,1,2]
 0 1 2 3 4 5 6

mid = 0+6/2=3 -> nums[mid]= 7 tar =0
case1: nums[mid]>nums[0] -> means nums[mid] is present in rotated part
	 case1.1-> if(nums[0] > target) means target is not present in rotated part -> st = mid+1
			else(nums[0]<target) means target is present in rotated part -> ed=mid-1

case2: nums[mid]<nums[0] -> means nums[mid] is present in non rotated part 
	case2.1-> if(nums[0] > target) means target is not present in rotated part -> st = mid+1
			else(nums[0]<target) means target is present in rotated part -> ed=mid-1

case3: nums[mid]==target -> return mid
*/
